<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>oss - 标签 - PME-Blog</title><link>https://hpk.me/tags/oss/</link><description>oss - 标签 - PME-Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>hpkaiq@qq.com (hpkaiq)</managingEditor><webMaster>hpkaiq@qq.com (hpkaiq)</webMaster><lastBuildDate>Mon, 17 Apr 2023 20:43:10 +0800</lastBuildDate><atom:link href="https://hpk.me/tags/oss/" rel="self" type="application/rss+xml"/><item><title>spring cloud java反向代理访问阿里云OSS私有资源</title><link>https://hpk.me/posts/spring-proxy-oss/</link><pubDate>Mon, 17 Apr 2023 20:43:10 +0800</pubDate><author>hpkaiq</author><guid>https://hpk.me/posts/spring-proxy-oss/</guid><description><![CDATA[<p>最近用到阿里云oss，有阿里云服务器，通过代理内网访问可以实现免除OSS流量费，查到很多nginx反向代理的教程，但是纯java实现没有找到，感觉可以试一试。</p>
<p>（一）
首先要解决反向代理的问题，搜到<code>org.mitre.dsmiley.httpproxy.ProxyServlet</code>可解决。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="nt">&lt;dependency&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;groupId&gt;</span>org.mitre.dsmiley.httpproxy<span class="nt">&lt;/groupId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;artifactId&gt;</span>smiley-http-proxy-servlet<span class="nt">&lt;/artifactId&gt;</span>
</span></span><span class="line"><span class="cl">   <span class="nt">&lt;version&gt;</span>1.11<span class="nt">&lt;/version&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/dependency&gt;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="nd">@Configuration</span>
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConfig</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nd">@Bean</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="n">ServletRegistrationBean</span> <span class="nf">servletRegistrationAliBean01</span><span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ServletRegistrationBean</span> <span class="n">oss</span>  <span class="o">=</span> <span class="k">new</span> <span class="n">ServletRegistrationBean</span><span class="o">(</span><span class="k">new</span> <span class="n">ProxyServlet</span><span class="o">(),</span> <span class="s">&#34;/ali/bucket_name/*&#34;</span><span class="o">);</span><span class="c1">//修改为自己的bucket_name
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">oss</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">&#34;bucket_name&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">oss</span><span class="o">.</span><span class="na">addInitParameter</span><span class="o">(</span><span class="s">&#34;targetUri&#34;</span><span class="o">,</span> <span class="s">&#34;http://bucket_name.oss-cn-beijing.aliyuncs.com&#34;</span><span class="o">);</span><span class="c1">//本地测试环境用外网地址，线上改成内网访问的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">oss</span><span class="o">.</span><span class="na">addInitParameter</span><span class="o">(</span><span class="n">ProxyServlet</span><span class="o">.</span><span class="na">P_LOG</span><span class="o">,</span> <span class="s">&#34;true&#34;</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">oss</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>（二）
Controller配置如下，转发到自己配置的反向代理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">@RestController
</span></span><span class="line"><span class="cl">@RefreshScope
</span></span><span class="line"><span class="cl">@RequestMapping(&#34;/api/es&#34;)
</span></span><span class="line"><span class="cl">public class TestController {
</span></span><span class="line"><span class="cl">     @RequestMapping(&#34;/static/**&#34;)
</span></span><span class="line"><span class="cl">    public void testVideoOne(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException, URISyntaxException {
</span></span><span class="line"><span class="cl">        String resourcePath = request.getRequestURI().replace(&#34;/api/es/static&#34;,&#34;&#34;);
</span></span><span class="line"><span class="cl">        HeaderUtil.setHeaderOwn(request,resourcePath);
</span></span><span class="line"><span class="cl">        request.getRequestDispatcher(&#34;/ali&#34; + resourcePath).forward(request, response);
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>（三）
其中为request设置Header以认证OSS访问的HeaderUtil如下，其中有OSS Authorization计算的java实现，用java的反射在request中添加Header信息。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">import org.apache.commons.codec.binary.Base64;
</span></span><span class="line"><span class="cl">import org.apache.tomcat.util.http.MimeHeaders;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">import javax.crypto.Mac;
</span></span><span class="line"><span class="cl">import javax.crypto.spec.SecretKeySpec;
</span></span><span class="line"><span class="cl">import javax.servlet.http.HttpServletRequest;
</span></span><span class="line"><span class="cl">import java.lang.reflect.Field;
</span></span><span class="line"><span class="cl">import java.net.URISyntaxException;
</span></span><span class="line"><span class="cl">import java.nio.charset.Charset;
</span></span><span class="line"><span class="cl">import java.security.InvalidKeyException;
</span></span><span class="line"><span class="cl">import java.security.NoSuchAlgorithmException;
</span></span><span class="line"><span class="cl">import java.text.SimpleDateFormat;
</span></span><span class="line"><span class="cl">import java.util.Date;
</span></span><span class="line"><span class="cl">import java.util.Locale;
</span></span><span class="line"><span class="cl">import java.util.TimeZone;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">public class HeaderUtil {
</span></span><span class="line"><span class="cl">    /**
</span></span><span class="line"><span class="cl">     * 给request加入Header信息，验证OSS访问权限
</span></span><span class="line"><span class="cl">     * @param request
</span></span><span class="line"><span class="cl">     * @throws URISyntaxException
</span></span><span class="line"><span class="cl">     */
</span></span><span class="line"><span class="cl">    public static void setHeaderOwn(HttpServletRequest request,String resourcePath) throws URISyntaxException {
</span></span><span class="line"><span class="cl">        SimpleDateFormat sdf = new SimpleDateFormat(&#34;EEE, dd MMM yyyy HH:mm:ss &#39;GMT&#39;&#34;, Locale.US);
</span></span><span class="line"><span class="cl">        sdf.setTimeZone(TimeZone.getTimeZone(&#34;GMT&#34;));
</span></span><span class="line"><span class="cl">        String date_GMT = sdf.format(new Date());
</span></span><span class="line"><span class="cl">        String data = request.getMethod() + &#34;\n&#34;
</span></span><span class="line"><span class="cl">                + &#34;\n&#34;
</span></span><span class="line"><span class="cl">                + &#34;\n&#34;
</span></span><span class="line"><span class="cl">                + date_GMT + &#34;\n&#34;
</span></span><span class="line"><span class="cl">                + resourcePath;
</span></span><span class="line"><span class="cl">        String signature = genHMAC(&#34;AccessKeySecret&#34;, data);//AccessKeySecret改成自己的
</span></span><span class="line"><span class="cl">        reflectSetParam(request, &#34;Authorization&#34;, &#34;OSS AccessKeyId:&#34; + signature);//AccessKeyId改成自己的
</span></span><span class="line"><span class="cl">        reflectSetParam(request, &#34;Date&#34;, date_GMT);
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    /**
</span></span><span class="line"><span class="cl">     * 反射修改header信息，key-value键值对加入到header中
</span></span><span class="line"><span class="cl">     *
</span></span><span class="line"><span class="cl">     * @param request
</span></span><span class="line"><span class="cl">     * @param key
</span></span><span class="line"><span class="cl">     * @param value
</span></span><span class="line"><span class="cl">     */
</span></span><span class="line"><span class="cl">    private static void reflectSetParam(HttpServletRequest request, String key, String value) {
</span></span><span class="line"><span class="cl">        Class&lt;? extends HttpServletRequest&gt; requestClass = request.getClass();
</span></span><span class="line"><span class="cl">        // System.out.println(&#34;request实现类=&#34;+requestClass.getName());
</span></span><span class="line"><span class="cl">        try {
</span></span><span class="line"><span class="cl">            Field request1 = requestClass.getDeclaredField(&#34;request&#34;);
</span></span><span class="line"><span class="cl">            request1.setAccessible(true);
</span></span><span class="line"><span class="cl">            Object o = request1.get(request);
</span></span><span class="line"><span class="cl">            Field coyoteRequest = o.getClass().getDeclaredField(&#34;coyoteRequest&#34;);
</span></span><span class="line"><span class="cl">            coyoteRequest.setAccessible(true);
</span></span><span class="line"><span class="cl">            Object o1 = coyoteRequest.get(o);
</span></span><span class="line"><span class="cl">            // System.out.println(&#34;coyoteRequest实现类=&#34;+o1.getClass().getName());
</span></span><span class="line"><span class="cl">            Field headers = o1.getClass().getDeclaredField(&#34;headers&#34;);
</span></span><span class="line"><span class="cl">            headers.setAccessible(true);
</span></span><span class="line"><span class="cl">            MimeHeaders o2 = (MimeHeaders) headers.get(o1);
</span></span><span class="line"><span class="cl">            o2.addValue(key).setString(value);
</span></span><span class="line"><span class="cl">        } catch (Exception e) {
</span></span><span class="line"><span class="cl">            e.printStackTrace();
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    /**
</span></span><span class="line"><span class="cl">     * HmacSHA1 Base64加密
</span></span><span class="line"><span class="cl">     * @param key
</span></span><span class="line"><span class="cl">     * @param data
</span></span><span class="line"><span class="cl">     * @return
</span></span><span class="line"><span class="cl">     */
</span></span><span class="line"><span class="cl">    public static String genHMAC(String key, String data) {
</span></span><span class="line"><span class="cl">        byte[] result = null;
</span></span><span class="line"><span class="cl">        try {
</span></span><span class="line"><span class="cl">            //根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称
</span></span><span class="line"><span class="cl">            SecretKeySpec signinKey = new SecretKeySpec(key.getBytes(), &#34;HmacSHA1&#34;);
</span></span><span class="line"><span class="cl">            //生成一个指定 Mac 算法 的 Mac 对象
</span></span><span class="line"><span class="cl">            Mac mac = Mac.getInstance(&#34;HmacSHA1&#34;);
</span></span><span class="line"><span class="cl">            //用给定密钥初始化 Mac 对象
</span></span><span class="line"><span class="cl">            mac.init(signinKey);
</span></span><span class="line"><span class="cl">            //完成 Mac 操作
</span></span><span class="line"><span class="cl">            byte[] rawHmac = mac.doFinal(data.getBytes(Charset.forName(&#34;UTF-8&#34;)));
</span></span><span class="line"><span class="cl">            result = Base64.encodeBase64(rawHmac);
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        } catch (NoSuchAlgorithmException e) {
</span></span><span class="line"><span class="cl">            System.err.println(e.getMessage());
</span></span><span class="line"><span class="cl">        } catch (InvalidKeyException e) {
</span></span><span class="line"><span class="cl">            System.err.println(e.getMessage());
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">        if (null != result) {
</span></span><span class="line"><span class="cl">            return new String(result);
</span></span><span class="line"><span class="cl">        } else {
</span></span><span class="line"><span class="cl">            return null;
</span></span><span class="line"><span class="cl">        }
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后访问的地址例如：
http://127.0.0.1:8081/api/es/static/bucket_name/object_name
可以加个拦截器做个登陆验证。</p>]]></description></item></channel></rss>